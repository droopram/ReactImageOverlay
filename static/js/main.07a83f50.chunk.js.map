{"version":3,"sources":["components/overlayGenerator.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["OverlayGenerator","props","previewImage","event","target","files","reader","FileReader","onloadend","setState","image","result","readAsDataURL","state","topBar","enabled","text","backgroundColor","textColor","bottomBar","badge","currency","oldText","newText","canvas","handlechange","bind","toggleBar","renderToImage","handleColorChange","e","fieldObject","name","fieldVal","value","fieldName","id","this","parentObject","varName","color","toggleObject","html2canvas","document","getElementById","then","append","imagePreview","src","className","style","visibility","onsubmit","class","type","onChange","for","defaultChecked","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4OAqMeA,G,wDA7LX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgEVC,aAAe,SAAAC,GACX,GAAIA,EAAMC,OAAOC,MAAM,GAAI,CAEvB,IAAIC,EAAS,IAAIC,WAEjBD,EAAOE,UAAY,WACf,EAAKC,SAAS,CACVC,MAAOJ,EAAOK,UAItBL,EAAOM,cAAcT,EAAMC,OAAOC,MAAM,MA1E5C,EAAKQ,MAAQ,CACTC,OAAQ,CACJC,SAAS,EACTC,KAAM,QACNC,gBAAiB,UACjBC,UAAW,QAEfC,UAAW,CACPJ,SAAS,EACTE,gBAAiB,cACjBC,UAAW,OACXF,KAAM,6BAEVI,MAAO,CACHL,SAAS,EACTM,SAAU,SACVC,QAAS,QACTC,QAAS,qBACTN,gBAAiB,UACjBC,UAAW,QAEfM,OAAQ,GACRd,MAAO,MAGX,EAAKe,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBA9BV,E,yDAiCNI,GACT,IAAIC,EAAcD,EAAE1B,OAAO4B,KACvBC,EAAWH,EAAE1B,OAAO8B,MACpBC,EAAYL,EAAE1B,OAAOgC,GACzBC,KAAK5B,SAAL,eACKsB,EADL,2BAGWM,KAAKxB,MAAMkB,IAHtB,kBAISI,EAAYF,Q,wCAKPH,EAAGQ,EAAcC,GAC/BF,KAAK5B,SAAL,eACK6B,EADL,2BAEWD,KAAKxB,MAAMyB,IAFtB,kBAGSC,EAAUT,EAAEU,Y,gCAKfC,GACNJ,KAAK5B,SAAL,eACKgC,EADL,2BAGWJ,KAAKxB,MAAM4B,IAHtB,IAIQ1B,SAAUsB,KAAKxB,MAAM4B,GAAc1B,c,sCAsB3C2B,IAAYC,SAASC,eAAe,gBAAgBC,MAAK,SAACrB,GACtDmB,SAASC,eAAe,UAAUE,OAAOtB,Q,+BAIvC,IAAD,OACDuB,EAAgB,yBAAKC,IAAKX,KAAKxB,MAAMH,MAAQ2B,KAAKxB,MAAMH,MAAQ,kBACpE,OACI,6BACI,yBAAKuC,UAAU,kBACX,wDAGJ,yBAAKb,GAAG,cAAca,UAAU,oCAC3BF,EACD,yBAAKX,GAAG,SAASc,MAAO,CACpBC,WAAYd,KAAKxB,MAAMC,OAAOC,QAAU,UAAY,SACpDyB,MAAOH,KAAKxB,MAAMC,OAAOI,UACzBD,gBAAiBoB,KAAKxB,MAAMC,OAAOG,kBAElCoB,KAAKxB,MAAMC,OAAOE,MAEvB,yBAAKoB,GAAG,YAAYc,MAAO,CACvBC,WAAYd,KAAKxB,MAAMM,UAAUJ,QAAU,UAAY,SACvDyB,MAAOH,KAAKxB,MAAMM,UAAUD,UAC5BD,gBAAiBoB,KAAKxB,MAAMM,UAAUF,kBAErCoB,KAAKxB,MAAMM,UAAUH,MAE1B,yBAAKoB,GAAG,QAAQc,MAAO,CACnBC,WAAYd,KAAKxB,MAAMO,MAAML,QAAU,UAAY,SACnDyB,MAAOH,KAAKxB,MAAMO,MAAMF,UACxBD,gBAAiBoB,KAAKxB,MAAMO,MAAMH,kBAElC,0BAAMmB,GAAG,YAAW,2BAAIC,KAAKxB,MAAMO,MAAMC,SAAWgB,KAAKxB,MAAMO,MAAME,UACrE,0BAAMc,GAAG,YAAYC,KAAKxB,MAAMO,MAAMC,SAAWgB,KAAKxB,MAAMO,MAAMG,WAI1E,0BAAMa,GAAG,OAAOa,UAAU,4CAA4CG,SAAUf,KAAKe,UACjF,4CACA,yBAAKC,MAAM,kBACP,2BAAOC,KAAK,OAAOtB,KAAK,QAAQiB,UAAU,yBAAyBM,SAAUlB,KAAKnC,gBAEtF,6BACA,sCACA,yBAAKmD,MAAM,kBACP,2BAAOJ,UAAU,2CAA2CO,IAAI,iBAAhE,YACA,yBAAKP,UAAU,sBACX,2BAAOb,GAAG,gBAAgBa,UAAU,mBAAmBK,KAAK,WAAWC,SAAU,kBAAM,EAAK5B,UAAU,WAAW8B,eAAgBpB,KAAKxB,MAAMC,OAAOC,WAEvJ,2BAAOkC,UAAU,4CAAjB,QACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeb,GAAG,OAAOJ,KAAK,SAASsB,KAAK,OAAOC,SAAUlB,KAAKZ,aAAcS,MAAOG,KAAKxB,MAAMC,OAAOE,SAGlI,6BACA,0CACA,yBAAKqC,MAAM,kBACP,2BAAOJ,UAAU,2CAA2CO,IAAI,oBAAhE,eACA,yBAAKP,UAAU,sBACX,2BAAOb,GAAG,mBACNa,UAAU,mBACVK,KAAK,WAAWC,SAAU,kBAAM,EAAK5B,UAAU,cAAc8B,eAAgBpB,KAAKxB,MAAMM,UAAUJ,WAE1G,2BAAOkC,UAAU,4CAAjB,QACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeb,GAAG,OAAOJ,KAAK,YAAYsB,KAAK,OAAOC,SAAUlB,KAAKZ,aAAcS,MAAOG,KAAKxB,MAAMM,UAAUH,SAGxI,6BACA,qCACA,yBAAKqC,MAAM,kBACP,2BAAOJ,UAAU,2CAA2CO,IAAI,oBAAhE,UACA,yBAAKP,UAAU,sBACX,2BAAOb,GAAG,mBACNa,UAAU,mBACVK,KAAK,WAAWC,SAAU,kBAAM,EAAK5B,UAAU,UAAU8B,eAAgBpB,KAAKxB,MAAMO,MAAML,WAElG,2BAAOkC,UAAU,4CAAjB,YACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeb,GAAG,UAAUJ,KAAK,QAAQsB,KAAK,OAAOC,SAAUlB,KAAKZ,aAAcS,MAAOG,KAAKxB,MAAMO,MAAME,WAE/H,2BAAO2B,UAAU,4CAAjB,YACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeb,GAAG,UAAUJ,KAAK,QAAQsB,KAAK,OAAOC,SAAUlB,KAAKZ,aAAcS,MAAOG,KAAKxB,MAAMO,MAAMG,WAE/H,2BAAO0B,UAAU,4CAAjB,YACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeb,GAAG,WAAWJ,KAAK,QAAQsB,KAAK,OAAOC,SAAUlB,KAAKZ,aAAcS,MAAOG,KAAKxB,MAAMO,MAAMC,cAIxI,yBAAK4B,UAAU,yCACX,4BAAQS,QAASrB,KAAKT,cAAeqB,UAAU,6BAA/C,eAIJ,yBAAKb,GAAG,SAASa,UAAU,gCAA3B,yD,GArLeU,cCMhBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCIcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.07a83f50.chunk.js","sourcesContent":["\r\nimport 'rc-color-picker/assets/index.css';\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport html2canvas from 'html2canvas';\r\nimport ColorPicker from 'rc-color-picker';\r\n\r\nclass OverlayGenerator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            topBar: {\r\n                enabled: true,\r\n                text: 'OP=OP',\r\n                backgroundColor: '#bac2c5',\r\n                textColor: '#f00',\r\n            },\r\n            bottomBar: {\r\n                enabled: true,\r\n                backgroundColor: 'transparent',\r\n                textColor: '#fff',\r\n                text: 'Psuedanthias squamipinnis'\r\n            },\r\n            badge: {\r\n                enabled: true,\r\n                currency: 'â‚¬',\r\n                oldText: '36,25',\r\n                newText: '15,00 of 5 voor 60',\r\n                backgroundColor: \"#ff5500\",\r\n                textColor: '#fff',\r\n            },\r\n            canvas: '',\r\n            image: null,\r\n\r\n        }\r\n        this.handlechange = this.handlechange.bind(this);\r\n        this.toggleBar = this.toggleBar.bind(this);\r\n        this.renderToImage = this.renderToImage.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n    }\r\n\r\n    handlechange(e) {\r\n        let fieldObject = e.target.name;\r\n        let fieldVal = e.target.value;\r\n        let fieldName = e.target.id;\r\n        this.setState({\r\n            [fieldObject]:\r\n            {\r\n                ...this.state[fieldObject],\r\n                [fieldName]: fieldVal\r\n            }\r\n        })\r\n    }\r\n\r\n    handleColorChange(e, parentObject, varName) {\r\n        this.setState({\r\n            [parentObject]: {\r\n                ...this.state[parentObject],\r\n                [varName]: e.color\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleBar(toggleObject) {\r\n        this.setState({\r\n            [toggleObject]:\r\n            {\r\n                ...this.state[toggleObject],\r\n                enabled: !this.state[toggleObject].enabled\r\n            }\r\n        });\r\n    }\r\n\r\n    previewImage = event => {\r\n        if (event.target.files[0]) {\r\n\r\n            let reader = new FileReader();\r\n\r\n            reader.onloadend = () => {\r\n                this.setState({\r\n                    image: reader.result\r\n                });\r\n            }\r\n\r\n            reader.readAsDataURL(event.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    renderToImage() {\r\n        html2canvas(document.getElementById(\"final-image\")).then((canvas) => {\r\n            document.getElementById(\"result\").append(canvas);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let imagePreview = (<img src={this.state.image ? this.state.image : \"./testimg.jpg\"} />);\r\n        return (\r\n            <div>\r\n                <div className=\"col-md-12 mb-5\">\r\n                    <h1>Image Overlay Generator</h1>\r\n                </div>\r\n\r\n                <div id=\"final-image\" className=\"col-12 col-md-4 offset-md-4 form\">\r\n                    {imagePreview}\r\n                    <div id=\"topBar\" style={{\r\n                        visibility: this.state.topBar.enabled ? 'visible' : 'hidden',\r\n                        color: this.state.topBar.textColor,\r\n                        backgroundColor: this.state.topBar.backgroundColor,\r\n                    }} >\r\n                        {this.state.topBar.text}\r\n                    </div>\r\n                    <div id=\"bottomBar\" style={{\r\n                        visibility: this.state.bottomBar.enabled ? 'visible' : 'hidden',\r\n                        color: this.state.bottomBar.textColor,\r\n                        backgroundColor: this.state.bottomBar.backgroundColor,\r\n                    }} >\r\n                        {this.state.bottomBar.text}\r\n                    </div>\r\n                    <div id=\"badge\" style={{\r\n                        visibility: this.state.badge.enabled ? 'visible' : 'hidden',\r\n                        color: this.state.badge.textColor,\r\n                        backgroundColor: this.state.badge.backgroundColor,\r\n                    }} >\r\n                        <span id=\"old-text\"><s>{this.state.badge.currency + this.state.badge.oldText}</s></span>\r\n                        <span id=\"new-text\">{this.state.badge.currency + this.state.badge.newText}</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <form id=\"form\" className=\"col-12 col-md-4 offset-md-4 form mb-5 p-3\" onsubmit={this.onsubmit}>\r\n                    <h3>Upload image</h3>\r\n                    <div class=\"form-group row\">\r\n                        <input type=\"file\" name=\"image\" className=\"btn btn-info btn-block\" onChange={this.previewImage} />\r\n                    </div>\r\n                    <hr />\r\n                    <h3>Topbar</h3>\r\n                    <div class=\"form-group row\">\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\" for=\"topbarEnabled\">Top bar?</label>\r\n                        <div className=\"col-sm-9 pt-2 pl-5\">\r\n                            <input id=\"topbarEnabled\" className=\"form-check-input\" type=\"checkbox\" onChange={() => this.toggleBar(\"topBar\")} defaultChecked={this.state.topBar.enabled} />\r\n                        </div>\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\">Text</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input className=\"form-control\" id=\"text\" name=\"topBar\" type=\"text\" onChange={this.handlechange} value={this.state.topBar.text} />\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                    <h3>Bottom Bar</h3>\r\n                    <div class=\"form-group row\">\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\" for=\"bottombarEnabled\">Bottom bar?</label>\r\n                        <div className=\"col-sm-9 pt-2 pl-5\">\r\n                            <input id=\"bottombarEnabled\"\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\" onChange={() => this.toggleBar(\"bottomBar\")} defaultChecked={this.state.bottomBar.enabled} />\r\n                        </div>\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\">Text</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input className=\"form-control\" id=\"text\" name=\"bottomBar\" type=\"text\" onChange={this.handlechange} value={this.state.bottomBar.text} />\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                    <h3>Badge</h3>\r\n                    <div class=\"form-group row\">\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\" for=\"bottombarEnabled\">Badge?</label>\r\n                        <div className=\"col-sm-9 pt-2 pl-5\">\r\n                            <input id=\"bottombarEnabled\"\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\" onChange={() => this.toggleBar(\"badge\")} defaultChecked={this.state.badge.enabled} />\r\n                        </div>\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\">Old Text</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input className=\"form-control\" id=\"oldText\" name=\"badge\" type=\"text\" onChange={this.handlechange} value={this.state.badge.oldText} />\r\n                        </div>\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\">New Text</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input className=\"form-control\" id=\"newText\" name=\"badge\" type=\"text\" onChange={this.handlechange} value={this.state.badge.newText} />\r\n                        </div>\r\n                        <label className=\"col-sm-3 col-form-label form-check-label\">Currency</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input className=\"form-control\" id=\"currency\" name=\"badge\" type=\"text\" onChange={this.handlechange} value={this.state.badge.currency} />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div className=\"col-12 col-md-4 offset-md-4 form mt-5\">\r\n                    <button onClick={this.renderToImage} className=\"btn btn-success btn-block\">\r\n                        Save image\r\n                    </button>\r\n                </div>\r\n                <div id=\"result\" className=\"col-12 col-md-4 offset-md-4 \">\r\n                    Result (Right click, save as to download image):\r\n\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OverlayGenerator","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OverlayGenerator from './components/overlayGenerator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OverlayGenerator></OverlayGenerator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}